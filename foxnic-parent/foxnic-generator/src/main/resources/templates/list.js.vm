#(authorAndTime)


function ListPage() {

	var settings,admin,form,table,layer,util,fox,upload,xmSelect;
	#if(enableLanguageContext)const languageContext='#(languageContext)'; #end
	#if(isTree)
	// 树形结构记录当前上级节点ID
	var #(parentIdVar) = #(rootId);
	var navStack=[[0,fox.translate("根节点"#(languageContextPartJS)]];
	#end
	//模块基础路径
	const moduleURL="#(moduleURL)";
	var dataTable=null;
	var sort=null;
	/**
      * 入口函数，初始化
      */
	this.init=function(layui) {

     	admin = layui.admin,settings = layui.settings,form = layui.form,upload = layui.upload,laydate= layui.laydate;
		table = layui.table,layer = layui.layer,util = layui.util,fox = layui.foxnic,xmSelect = layui.xmSelect,dropdown=layui.dropdown;

		if(window.pageExt.list.beforeInit) {
			window.pageExt.list.beforeInit();
		}
     	//渲染表格
     	renderTable();
		#if(isTree)
		//初始化层级导航
		refreshNav();
		#end
		//初始化搜索输入框组件
		initSearchFields();
		//绑定搜索框事件
		bindSearchEvent();
		//绑定按钮事件
		bindButtonEvent();
		//绑定行操作按钮事件
    	bindRowOperationEvent();
     }


     /**
      * 渲染表格
      */
    function renderTable() {
		$(window).resize(function() {
			fox.adjustSearchElement();
		});
		fox.adjustSearchElement();
		//
		 var marginTop=$(".search-bar").height()+$(".search-bar").css("padding-top")+$(".search-bar").css("padding-bottom")
		 $("#table-area").css("margin-top",marginTop+"px");
		//
		function renderTableInternal() {

			var ps={searchField: "$composite"};
		    #if(tableSortField!=null)
			ps.sortField="#(tableSortField)";
			ps.sortType="#(tableSortType)";
			sort={ field : ps.sortField,type : ps.sortType} ;
			#end
			var contitions={};

			if(window.pageExt.list.beforeQuery){
				window.pageExt.list.beforeQuery(contitions,ps,"tableInit");
			}
			ps.searchValue=JSON.stringify(contitions);

			var templet=window.pageExt.list.templet;
			if(templet==null) {
				templet=function(field,value,row) {
					if(value==null) return "";
					return value;
				}
			}
			var h=#if(searchDisabled)-28; #else $(".search-bar").height();#end
			var tableConfig={
				elem: '#data-table',
				toolbar: '#toolbarTemplate',
				defaultToolbar: ['filter', 'print',{title: fox.translate('刷新数据','','cmp:table'),layEvent: 'refresh-data',icon: 'layui-icon-refresh-3'}],
				url: moduleURL +'/query-paged-list',
				height: 'full-'+(h+28),
				limit: 50,
				where: ps,
				#if(isTree)
				//树形结构需要传递相关参数
				where: { #(parentIdVar) : #(parentIdVar) } ,
				#end
				cols: [[
					{ fixed: 'left',type: 'numbers' },
					{ fixed: 'left',type:#if(mulitiSelect)'checkbox'#else'radio'#end }
					#for(f : fields)
					#if(!f.disableInList)
					#if(f.typeName.equals("date_input"))
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList)   ,title: fox.translate('#(f.labelInList)'#(languageContextPartJS)) #if(f.listFillByPropertyNames!=null) ,templet: function (d) { return templet('#(f.varName)',fox.dateFormat(fox.getProperty(d,#(f.listFillByPropertyNames),0,'#(f.tableBadgeStyle)','#(f.varName)'),"#(f.dateField.format)"),d); } #else ,templet: function (d) { return templet('#(f.varName)',fox.dateFormat(d.#(f.varName),"#(f.dateField.format)"),d); } #end #if(f.listPerm!=null),perm:"#(f.listPerm)" #end  }
					#elseif(f.typeName.equals("upload") && f.uploadField.isImageOnly && f.uploadField.count==1)
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList)   , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet: function (d) { return '<img style="height:100%;" fileType="image/png" onclick="window.previewImage(this)"  src="'+apiurls.storage.image+'?id='+ d.#(f.varName)+'" />'; } #if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#elseif(f.typeName.equals("radio_box"))
					#if(f.radioField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getDictText(RADIO_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#if(f.radioField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getEnumText(RADIO_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#elseif(f.typeName.equals("check_box"))
					#if(f.checkField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getDictText(CHECK_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#if(f.checkField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getEnumText(CHECK_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#elseif(f.typeName.equals("logic_switch"))
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet: '#cell-tpl-#(f.varName)'#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#elseif(f.typeName.equals("select_box"))
					#if(f.selectField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getEnumText(SELECT_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#if(f.selectField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet:function (d){ return templet('#(f.varName)',fox.getDictText(SELECT_#(f.varName.toUpperCase())_DATA,d.#(f.varName),'#(f.tableBadgeStyle)','#(f.varName)'),d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#if(f.selectField.queryApi!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)), templet: function (d) { return templet('#(f.varName)' #if(f.selectField.fillWith!=null),fox.joinLabel(d.#(f.selectField.fillWith),"#(f.selectField.textField)",',','#(f.tableBadgeStyle)','#(f.varName)')#end #if(f.listFillByPropertyNames!=null),fox.getProperty(d,#(f.listFillByPropertyNames),0,'#(f.tableBadgeStyle)','#(f.varName)')#end,d);}#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#else
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList)  , title: fox.translate('#(f.labelInList)'#(languageContextPartJS)) #if(f.listFillByPropertyNames!=null), templet: function (d) { return templet('#(f.varName)',fox.getProperty(d,#(f.listFillByPropertyNames),0,'#(f.tableBadgeStyle)','#(f.varName)'),d);} #else , templet: function (d) { return templet('#(f.varName)',d.#(f.varName),d);}  #end#if(f.listPerm!=null),perm:"#(f.listPerm)" #end}
					#end
					#end
					#end
					#if(!disableSpaceColumn)
					,{ field: fox.translate('空白列','','cmp:table'), align:"center", hide:false, sort: false, title: "",minWidth:8,width:8,unresize:true}
					#end
					#if(hasOperateColumn)
					,{ field: 'row-ops', fixed: 'right', align: 'center', toolbar: '#tableOperationTemplate', title: fox.translate('操作','','cmp:table'), width: #(operateColumnWidth) }
					#end
				]],
				done: function (data) { window.pageExt.list.afterQuery && window.pageExt.list.afterQuery(data); },
				footer : {
					exportExcel : #if(isEnableExportExcel) admin.checkAuth(AUTH_PREFIX+":export") #else false #end,
					importExcel : #if(isEnableImportExcel) admin.checkAuth(AUTH_PREFIX+":import")?{
						params : {} ,
						callback : function(r) {
							if(r.success) {
								layer.msg(fox.translate('数据导入成功','','cmp:table')+"!");
							} else {
								layer.msg(fox.translate('数据导入失败','','cmp:table')+"!");
							}
							// 是否执行后续逻辑：错误提示
							return false;
						}
					}:false #else false #end
				}
			};
			window.pageExt.list.beforeTableRender && window.pageExt.list.beforeTableRender(tableConfig);
			dataTable=fox.renderTable(tableConfig);
			#if(hasLogicField)
			//绑定 Switch 切换事件
			#for(f : fields)
			#if(f.typeName.equals("logic_switch"))
			fox.bindSwitchEvent("cell-tpl-#(f.varName)",moduleURL +'/update','#(idPropertyName)','#(f.varName)',function(result,data,ctx){
				window.pageExt.list.afterSwitched && window.pageExt.list.afterSwitched("#(f.varName)",result,data,ctx);
				refreshRowData(data,true);
			});
			#end
			#end
			#end
			//绑定排序事件
			table.on('sort(data-table)', function(obj){
			  refreshTableData(obj.sortField,obj.type);
			});
			window.pageExt.list.afterTableRender && window.pageExt.list.afterTableRender();
		}
		setTimeout(renderTableInternal,1);
    };

	/**
	 * 刷新单号数据
	 * */
	function refreshRowData(data,remote) {
		var context=dataTable.getDataRowContext( { #(paramJson) } );
		if(context==null) return;
		if(remote) {
			admin.post(moduleURL+"/get-by-id", { #(paramJson) }, function (r) {
				if (r.success) {
					data = r.data;
					context.update(data);
					fox.renderFormInputs(form);
				} else {
					fox.showMessage(data);
				}
			});
		} else {
			context.update(data);
			fox.renderFormInputs(form);
		}
	}

	/**
      * 刷新表格数据
      */
	function refreshTableData(sortField,sortType,reset) {
		function getSelectedValue(id,prop) { var xm=xmSelect.get(id,true); return xm==null ? null : xm.getValue(prop);}
		var value = {};
		#for(f : fields)
		#if(f.isHideInSearch==null || (f.isHideInSearch!=null && !f.isHideInSearch))
		#if(f.typeName.equals("logic_switch"))
		value.#(f.varName)={ inputType:"logic_switch",value: getSelectedValue("##(f.varName)","value"), label:getSelectedValue("##(f.varName)","nameStr") #if(f.searchField!=null),field:"#(f.searchField)"#end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end };
		#else if(f.typeName.equals("radio_box"))
		value.#(f.varName)={ inputType:"radio_box", value: getSelectedValue("##(f.varName)","value"), label:getSelectedValue("##(f.varName)","nameStr") #if(f.searchField!=null),field:"#(f.searchField)"#end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end};
		#else if(f.typeName.equals("select_box"))
		#if(f.selectField.queryApi!=null)
		#if(f.search.fuzzySearch)
		value.#(f.varName)={ inputType:"select_box", value: $("##(f.varName)").val()#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end #if(f.selectField.fillWith) ,fillBy:["#(f.selectField.fillWith)"] #end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end #if(f.searchField!=null),field:"#(f.searchField)"#end };
		#else
		value.#(f.varName)={ inputType:"select_box", value: getSelectedValue("##(f.varName)","value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end #if(f.selectField.fillWith) ,fillBy:["#(f.selectField.fillWith)"] #end  #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end #if(f.searchField!=null),field:"#(f.searchField)"#end, label:getSelectedValue("##(f.varName)","nameStr") };
		#end
		#else
		value.#(f.varName)={ inputType:"select_box", value: getSelectedValue("##(f.varName)","value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, label:getSelectedValue("##(f.varName)","nameStr") #if(f.searchField!=null),field:"#(f.searchField)"#end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end};
		#end
		#else if(f.typeName.equals("check_box"))
		value.#(f.varName)={ inputType:"check_box", value: getSelectedValue("##(f.varName)","value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, label:getSelectedValue("##(f.varName)","nameStr") #if(f.searchField!=null),field:"#(f.searchField)"#end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end};
		#else if(f.typeName.equals("date_input"))
		#if(f.search.searchInRange)
		value.#(f.varName)={ inputType:"date_input", begin: $("##(f.varName)-begin").val(), end: $("##(f.varName)-end").val() #if(f.listFillByPropertyNames),fillBy:#(f.listFillByPropertyNames) #end #if(f.searchField!=null),field:"#(f.searchField)"#end ,matchType:"#(f.search.matchType)" };
		#else
		value.#(f.varName)={ inputType:"date_input", value: $("##(f.varName)").val() #if(f.searchField!=null) #if(f.listFillByPropertyNames),fillBy:#(f.listFillByPropertyNames) #end ,field:"#(f.searchField)"#end ,matchType:"#(f.search.matchType)"};
		#end
		#else if(f.typeName.equals("number_input"))
		#if(f.search.searchInRange)
		value.#(f.varName)={ inputType:"number_input", begin: $("##(f.varName)-begin").val(), end: $("##(f.varName)-end").val() #if(f.searchField!=null),field:"#(f.searchField)"#end #if(f.listFillByPropertyNames) ,fillBy:#(f.listFillByPropertyNames) #end};
		#else
		value.#(f.varName)={ inputType:"number_input", value: $("##(f.varName)").val() #if(f.searchField!=null),field:"#(f.searchField)"#end};
		#end
		#else if(f.typeName.equals("button"))
		value.#(f.varName)={ inputType:"button",value: $("##(f.varName)").val()#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)" #end #if(f.listFillByPropertyNames),fillBy:#(f.listFillByPropertyNames) #end,label:$("##(f.varName)-button").text() #if(f.searchField!=null),field:"#(f.searchField)"#end };
		#else
		value.#(f.varName)={ inputType:"button",value: $("##(f.varName)").val()#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,splitValue:#(f.search.splitValue),valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)" #end #if(f.listFillByPropertyNames),fillBy:#(f.listFillByPropertyNames) #end #if(f.searchField!=null),field:"#(f.searchField)"#end};
		#end
		#end
		#end
		var ps={searchField:"$composite"};
		if(window.pageExt.list.beforeQuery){
			if(!window.pageExt.list.beforeQuery(value,ps,"refresh")) return;
		}
		ps.searchValue=JSON.stringify(value);
		if(sortField) {
			ps.sortField=sortField;
			ps.sortType=sortType;
			sort={ field : sortField,type : sortType} ;
		} else {
			if(sort) {
				ps.sortField=sort.field;
				ps.sortType=sort.type;
			} #if(tableSortField!=null)else {
				ps.sortField="#(tableSortField)";
				ps.sortType="#(tableSortType)";
				sort={ field : sortField,type : sortType} ;
			}
			#end
		}
		#if(isTree)
		// 树形结构锁定上级ID
		ps.#(parentIdVar)=#(parentIdVar);
		#end
		if(reset) {
			table.reload('data-table', { where : ps , page:{ curr:1 } });
		} else {
			table.reload('data-table', { where : ps });
		}
	}

    #if(isTree)
	//导航刷新函数
	function refreshNav() {
		$("#tree-nav").empty();
		for (var i=0;i<navStack.length;i++) {
			var last=i==navStack.length-1;
			$("#tree-nav").append("<a href='javascript:' class='nav-node' index='"+i+"'>"+navStack[i][1]+"</a>")
			if(!last) {
				$("#tree-nav").append('<span lay-separator="">/</span>');
			}
		}
		//点击事件
		$(".nav-node").click(function(it){
			it=$(this);
			//倒换
			var z=it.attr('index');
			var tmp=[];
			for (var i=0;i<=z;i++) {
				//debugger;
				tmp.push(navStack[i]);
			}
			navStack=tmp;
			#(parentIdVar)=navStack[navStack.length-1][0];
			resetSearchFields();
			//
			refreshTableData();
			refreshNav();
		});
	};
	#end

	/**
	  * 获得已经选中行的数据,不传入 field 时，返回所有选中的记录，指定 field 时 返回指定的字段集合
	  */
	function getCheckedList(field) {
		var checkStatus = table.checkStatus('data-table');
		var data = checkStatus.data;
		if(!field) return data;
		for(var i=0;i<data.length;i++) data[i]=data[i][field];
		return data;
	}

	/**
	 * 重置搜索框
	 */
	function resetSearchFields() {
		$('#search-field').val("");
		$('#search-input').val("");
		layui.form.render();
	}

	function initSearchFields() {

		fox.switchSearchRow(#(searchRowsDisplay));

	#for(f : searchFields)
	#if(!f.isHideInSearch)
		#if(f.typeName.equals("logic_switch"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: #(!f.search.selectMuliti),
			on: function(data){
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					if(data.change && data.change.length>0) {
						refreshTableData();
					}
					#end
					window.pageExt.list.onSelectBoxChanged && window.pageExt.list.onSelectBoxChanged("#(f.varName)",data.arr,data.change,data.isAdd);
				},1);
			},
		});
		#else if(f.typeName.equals("radio_box"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: #(!f.search.selectMuliti),
			on: function(data){
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					if(data.change && data.change.length>0) {
						refreshTableData();
					}
					#end
					window.pageExt.list.onSelectBoxChanged && window.pageExt.list.onSelectBoxChanged("#(f.varName)",data.arr,data.change,data.isAdd);
				},1);
			},
			//toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#if(f.radioField.dictCode!=null)
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({data:data[i],name:data[i].text,value:data[i].code});
				}
				return opts;
			}
			#end
			#if(f.radioField.enumTypeName!=null)
			transform:function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					opts.push({data:data[i],name:data[i].text,value:data[i].code});
				}
				return opts;
			}
			#end
		});
		#else if(f.typeName.equals("check_box"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: #(!f.search.selectMuliti),
			on: function(data){
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					if(data.change && data.change.length>0) {
						refreshTableData();
					}
					#end
					window.pageExt.list.onSelectBoxChanged && window.pageExt.list.onSelectBoxChanged("#(f.varName)",data.arr,data.change,data.isAdd);
				},1);
			},
			//toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#if(f.checkField.dictCode!=null)
				transform: function(data) {
					//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
					var opts=[];
					for (var i = 0; i < data.length; i++) {
						if(!data[i]) continue;
						opts.push({data:data[i],name:data[i].text,value:data[i].code});
					}
					return opts;
				}
			#end
			#if(f.checkField.enumTypeName!=null)
				transform:function(data) {
					//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
					var opts=[];
					if(!data) return opts;
					for (var i = 0; i < data.length; i++) {
						opts.push({data:data[i],name:data[i].text,value:data[i].code});
					}
					return opts;
				}
			#end
		});
		#else if(f.typeName.equals("date_input"))
		#if(f.search.searchInRange)
		laydate.render({
			elem: '##(f.varName)-begin',
			trigger:"click",
			done: function(value, date, endDate) {
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
						refreshTableData();
					#end
					window.pageExt.list.onDatePickerChanged && window.pageExt.list.onDatePickerChanged("#(f.varName)",value, date, endDate);
				},1);
			}
		});
		laydate.render({
			elem: '##(f.varName)-end',
			trigger:"click",
			done: function(value, date, endDate) {
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					refreshTableData();
					#end
					window.pageExt.list.onDatePickerChanged && window.pageExt.list.onDatePickerChanged("#(f.varName)",value, date, endDate);
				},1);
			}
		});
		#else
		laydate.render({
			elem: '##(f.varName)',
			trigger:"click",
			done: function(value, date, endDate) {
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					refreshTableData();
					#end
					window.pageExt.list.onDatePickerChanged && window.pageExt.list.onDatePickerChanged("#(f.varName)",value, date, endDate);
				},1);
			}
		});
		#end
		#else if(f.typeName.equals("select_box"))
		//渲染 #(f.varName) 下拉字段
		fox.renderSelectBox({
			el: "#(f.varName)",
			radio: #(!f.search.selectMuliti),
			size: "small",
			filterable: #(f.selectField.filter),
			on: function(data){
				setTimeout(function () {
					#if(f.search.triggerOnSelect)
					if(data.change && data.change.length>0) {
						refreshTableData();
					}
					#end
					window.pageExt.list.onSelectBoxChanged && window.pageExt.list.onSelectBoxChanged("#(f.varName)",data.arr,data.change,data.isAdd);
				},1);
			},
			#if(f.selectField.paging)
			paging: true,
			pageRemote: true,
			#end
			#if(f.selectField.toolbar)
			toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#end
			//转换数据
			#if(f.selectField.enumTypeName!=null)
			transform:function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					opts.push({data:data[i],name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.queryApi!=null)
			#if(f.selectField.filter)
			searchField: "#(f.selectField.textField)", //请自行调整用于搜索的字段名称
			extraParam: {}, //额外的查询参数，Object 或是 返回 Object 的函数
			#end
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({data:data[i],name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.dictCode!=null)
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({data:data[i],name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
		});
	#end
	#end
	#end
		fox.renderSearchInputs();
		window.pageExt.list.afterSearchInputReady && window.pageExt.list.afterSearchInputReady();
	}

	/**
	 * 绑定搜索框事件
	 */
	function bindSearchEvent() {
		//回车键查询
        $(".search-input").keydown(function(event) {
			if(event.keyCode !=13) return;
		  	refreshTableData(null,null,true);
        });

        // 搜索按钮点击事件
        $('#search-button').click(function () {
			refreshTableData(null,null,true);
        });

		// 搜索按钮点击事件
		$('#search-button-advance').click(function () {
			fox.switchSearchRow(#(searchRowsDisplay),function (ex){
				if(ex=="1") {
					$('#search-button-advance span').text("关闭");
				} else {
					$('#search-button-advance span').text("更多");
				}
			});
		});

		#for(f : fields)
		#if(!f.isHideInSearch)
		#if(f.typeName.equals("button"))
		// #(f.buttonField.action.label)对话框
		$("##(f.varName)-button").click(function(){
			#if(f.buttonField.action.actionType=="org-dialog" || f.buttonField.action.actionType=="pos-dialog")
			var #(f.varName)DialogOptions={
				field:"#(f.varName)",
				inputEl:$("##(f.varName)"),
				buttonEl:$(this),
				single:false,
				//限制浏览的范围，指定根节点 id 或 code ，优先匹配ID
				root: "#(f.buttonField.action.rootId)",
				targetType:"#(f.buttonField.action.targetType)",
				prepose:function(param){ return window.pageExt.list.beforeDialog && window.pageExt.list.beforeDialog(param);},
				callback:function(param,result){ window.pageExt.list.afterDialog && window.pageExt.list.afterDialog(param,result);}
			};
			#(f.buttonField.action.functionName)(#(f.varName)DialogOptions);
			#end
			#if(f.buttonField.action.actionType=="emp-dialog")
				var #(f.varName)DialogOptions={
				field:"#(f.varName)",
				inputEl:$("##(f.varName)"),
				buttonEl:$(this),
				single:false,
				//限制浏览的范围，指定根节点 id 或 code ，优先匹配ID
				root: "#(f.buttonField.action.rootId)",
				targetType:"#(f.buttonField.action.targetType)",
				prepose:function(param){ return window.pageExt.list.beforeDialog && window.pageExt.list.beforeDialog(param);},
				callback:function(param,result){ window.pageExt.list.afterDialog && window.pageExt.list.afterDialog(param,result);}
			};
			#(f.buttonField.action.functionName)(#(f.varName)DialogOptions);
			#end
		});
		#end
		#end
		#end
	}

	/**
	 * 绑定按钮事件
	  */
	function bindButtonEvent() {

		//头工具栏事件
		table.on('toolbar(data-table)', function(obj){
			var checkStatus = table.checkStatus(obj.config.id);
			var selected=#if(isSimplePK)getCheckedList("#(idPropertyName)");#else getCheckedList();#end
			if(window.pageExt.list.beforeToolBarButtonEvent) {
				var doNext=window.pageExt.list.beforeToolBarButtonEvent(selected,obj);
				if(!doNext) return;
			}
			switch(obj.event){
				case 'create':
					admin.putTempData('#(formDataKey)', {});
					#if(bpm)
					var defaultValue={};
					if(window.pageExt.list.getBpmViewConfig) {
						defaultValue=window.pageExt.list.getBpmViewConfig(obj.event);
					}
					bpm.openProcessView(null,null,false,{"formDefinitionCode":"#(bpmFormCode)"},refreshTableData,refreshRowData,"bill",defaultValue);
					#else
					#if(createNewButton.functionName==null)
					openCreateFrom();
					#else
					window.pageExt.list.#(createNewButton.functionName)();
					#end
					#end
					break;
				#if(isSimplePK)
				case 'batch-del':
					#if(batchDeleteButton.functionName==null)
					batchDelete(selected);
					#else
					window.pageExt.list.#(batchDeleteButton.functionName)();
					#end
					break;
				#end
				#for(b:toolButtons)
				case 'tool-#(b.id)':
					window.pageExt.list.#(b.functionName) && window.pageExt.list.#(b.functionName)(selected,obj);
					break;
				#end
				case 'refresh-data':
					refreshTableData();
					break;
				case 'other':
					break;
			};
		});


		//添加按钮点击事件
        function openCreateFrom() {
        	//设置新增是初始化数据
        	var data={};
        	#if(isTree)
        	data.#(parentIdVar)=#(parentIdVar);
        	#end
			admin.putTempData('#(formDataKey)-form-action', "create",true);
            showEditForm(data);
        };

		#if(isSimplePK)
        //批量删除按钮点击事件
        function batchDelete(selected) {

        	if(window.pageExt.list.beforeBatchDelete) {
				var doNext=window.pageExt.list.beforeBatchDelete(selected);
				if(!doNext) return;
			}

			var ids=getCheckedList("#(idPropertyName)");
            if(ids.length==0) {
				top.layer.msg(fox.translate('请选择需要删除的'+'#(topic)'+"!"#(languageContextPartJS)));
            	return;
            }
            //调用批量删除接口
			top.layer.confirm(fox.translate('确定删除已选中的'+'#(topic)'+'吗？'#(languageContextPartJS)), function (i) {
                top.layer.close(i);
				admin.post(moduleURL+"/delete-by-ids", { #(idsPropertyName): ids }, function (data) {
                    if (data.success) {
						if(window.pageExt.list.afterBatchDelete) {
							var doNext=window.pageExt.list.afterBatchDelete(data);
							if(!doNext) return;
						}
						fox.showMessage(data);
                        refreshTableData();
                    } else {
						if(data.data>0) {
							refreshTableData();
						}
						fox.showMessage(data);
                    }
                },{delayLoading:200,elms:[$("#delete-button")]});
			});
        }
        #end
	}

    /**
     * 绑定行操作按钮事件
     */
    function bindRowOperationEvent() {
		// 工具条点击事件
		table.on('tool(data-table)', function (obj) {
			var data = obj.data;
			var layEvent = obj.event;

			if(window.pageExt.list.beforeRowOperationEvent) {
				var doNext=window.pageExt.list.beforeRowOperationEvent(data,obj);
				if(!doNext) return;
			}

			admin.putTempData('#(formDataKey)-form-action', "",true);
			if (layEvent === 'edit') { // 修改
				#if(bpm)
				bpm.getProcessInstanceByBill("#(bpmFormCode)",{ #(paramJson) },function(p) {
					if(p) {
						bpm.openProcessView(p.id,null,false,{"formDefinitionCode":"#(bpmFormCode)"},refreshTableData,refreshRowData,"bill");
					} else {
						if(window.pageExt.list.handleNoProcessBill) {
							window.pageExt.list.handleNoProcessBill({#(paramJson)});
						} else {
							top.layer.msg(fox.translate('当前业务单据尚未关联流程','','cmp:table'), {icon: 2, time: 1500});
						}
					}
				},"bill");
				#else
				#if(modifyButton.functionName==null)
				admin.post(moduleURL+"/get-by-id", { #(paramJson) }, function (data) {
					if(data.success) {
						admin.putTempData('#(formDataKey)-form-action', "edit",true);
						showEditForm(data.data);
					} else {
						 fox.showMessage(data);
					}
				});
				#else
				window.pageExt.list.#(modifyButton.functionName)({ #(paramJson) });
				#end
				#end
			} else if (layEvent === 'view') { // 查看
				#if(formViewButton.functionName==null)
				admin.post(moduleURL+"/get-by-id", { #(paramJson) }, function (data) {
					if(data.success) {
						admin.putTempData('#(formDataKey)-form-action', "view",true);
						showEditForm(data.data);
					} else {
						fox.showMessage(data);
					}
				});
				#else
				window.pageExt.list.#(formViewButton.functionName)({ #(paramJson) });
				#end
			}
			else if (layEvent === 'del') { // 删除

				if(window.pageExt.list.beforeSingleDelete) {
					var doNext=window.pageExt.list.beforeSingleDelete(data);
					if(!doNext) return;
				}

				#if(bpm)
				top.layer.confirm(fox.translate('确定要废弃当前流程实例吗？','','cmp:table'), function (i) {
					top.layer.close(i);
					bpm.getProcessInstanceByBill("#(bpmFormCode)",{ #(paramJson) },function(p) {
						if(p) {
							bpm.abandon({processInstanceId:p.id,reason:"无",force:false},function (r){
								if(r.success) {
									fox.showMessage(r);
									window.module.refreshRowData(data,true);
								} else {
									fox.showMessage(r);
								}
							},[$(".ops-delete-button[data-id='"+data.#(idPropertyName)+"']")]);
						} else {
							admin.post(moduleURL+"/delete", { #(paramJson) }, function (data) {
								top.layer.closeAll('loading');
								if (data.success) {
									if(window.pageExt.list.afterSingleDelete) {
										var doNext=window.pageExt.list.afterSingleDelete(data);
										if(!doNext) return;
									}
									fox.showMessage(data);
									refreshTableData();
								} else {
									fox.showMessage(data);
								}
							},{delayLoading:100, elms:[$(".ops-delete-button[data-id='"+data.#(idPropertyName)+"']")]});
						}
					},"bill",);
				});
				#else
				#if(deleteButton.functionName==null)
				top.layer.confirm(fox.translate('确定删除此'+'#(topic)'+'吗？'#(languageContextPartJS)), function (i) {
					top.layer.close(i);
					admin.post(moduleURL+"/delete", { #(paramJson) }, function (data) {
						top.layer.closeAll('loading');
						if (data.success) {
							if(window.pageExt.list.afterSingleDelete) {
								var doNext=window.pageExt.list.afterSingleDelete(data);
								if(!doNext) return;
							}
							fox.showMessage(data);
							refreshTableData();
						} else {
							fox.showMessage(data);
						}
					},{delayLoading:100, elms:[$(".ops-delete-button[data-id='"+data.#(idPropertyName)+"']")]});
				});
				#else
				window.pageExt.list.#(deleteButton.functionName)({ #(paramJson) });
				#end
				#end
			}
			#for(b:opColumnButtons)
			else if (layEvent === '#(b.id)') { // #(b.label)
				window.pageExt.list.#(b.functionName)(data,this);
			}
			#end
			#if(opColumnMenus!=null && opColumnMenus.size()>0)
			else if(obj.event === 'ops-more'){
				//更多下拉菜单
				var  items = #(opColumnMenuData);
				items=items.filter(function (item,i,arr){
					if(!item.perm) return true;
					else return admin.checkAuth(item.perm);
				});
				dropdown.render({
					elem: this
					,show: true //外部事件触发即显示
					,data: items
					,click: function(menu, othis){
						if(menu.perm && !admin.checkAuth(menu.perm)) {
							top.layer.msg(fox.translate('缺少操作权限','','cmp:table'), {icon: 2, time: 1500});
							return;
						}
						window.pageExt.list.moreAction && window.pageExt.list.moreAction(menu,data, othis);
					}
					,align: 'right'
					,style: 'box-shadow: 1px 1px 10px rgb(0 0 0 / 12%);'
				});
			}
			#end
			#if(isTree)else if (layEvent === 'drill') {

				#(parentIdVar) = data.#(idPropertyName);
				navStack.push([data.id,data.label]);
				resetSearchFields();
				refreshTableData();
				refreshNav();

			} #end
		});

    };

    /**
     * 打开编辑窗口
     */
	function showEditForm(data) {
		if(window.pageExt.list.beforeEdit) {
			var doNext=window.pageExt.list.beforeEdit(data);
			if(!doNext) return;
		}
		var action=admin.getTempData('#(formDataKey)-form-action');
		var queryString="";
		if(data && data.#(idPropertyName)) queryString=#(paramQueryString);
		if(window.pageExt.list.makeFormQueryString) {
			queryString=window.pageExt.list.makeFormQueryString(data,queryString,action);
		}
		admin.putTempData('#(formDataKey)', data);
		var area=admin.getTempData('#(formAreaKey)');
		var height= (area && area.height) ? area.height : ($(window).height()*0.6);
		var top= (area && area.top) ? area.top : (($(window).height()-height)/2);
		var title = fox.translate('#(topic)'#(languageContextPartJS));
		if(action=="create") title=fox.translate('添加','','cmp:table')+title;
		else if(action=="edit") title=fox.translate('修改','','cmp:table')+title;
		else if(action=="view") title=fox.translate('查看','','cmp:table')+title;

		admin.popupCenter({
			title: title,
			resize: false,
			offset: [top,null],
			area: ["#(formWindow.width)",height+"px"],
			type: 2,
			id:"#(formDataKey)-win",
			content: '#(formURI)' + (queryString?("?"+queryString):""),
			finish: function () {
				if(action=="create") {
					refreshTableData();
				}
				if(action=="edit") {
					#(refreshAfterEdit)?refreshTableData():refreshRowData(data,true);
				}
			}
		});
	};

	window.module={
		refreshTableData: refreshTableData,
		refreshRowData: refreshRowData,
		getCheckedList: getCheckedList,
		showEditForm: showEditForm
	};

	window.pageExt.list.ending && window.pageExt.list.ending();

};


layui.use(['form', 'table', 'util', 'settings', 'admin', 'upload','foxnic','xmSelect','laydate','dropdown'],function() {
	var task=setInterval(function (){
		if(!window["pageExt"]) return;
		clearInterval(task);
		(new ListPage()).init(layui);
	},1);
});
