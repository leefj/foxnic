package com.github.foxnic.dao.config;

import com.github.foxnic.commons.log.Logger;
import com.github.foxnic.dao.spring.PostgresDAO;
import com.github.foxnic.sql.GlobalSettings;
import com.github.foxnic.sql.expr.SQL;

public class DAO4PG extends PostgresDAO implements TestDAO{
	public DAO4PG()
	{
		super();
		
		//设置默认方言
		GlobalSettings.DEFAULT_SQL_DIALECT=this.getSQLDialect();
		
		this.setDataSource((new Configs()).getDataSourcePG());
	}
 
	private String normalTable=null;
	private String pkTable=null;
	private String clobTableName=null;
	
	private String allTypeTableName=null;
	
	public String getAllTypeTableName() {
		return allTypeTableName;
	}
	 
	public String getClobTableName() {
		return clobTableName;
	}
	 
	public String getNormalTableName() {
		return normalTable;
	}
	
	public String getPKTableName() {
		return pkTable;
	}

	public void setTableName(String normalTable,String pkTable,String clobTable,String allTypeTable) {
		this.normalTable = normalTable;
		this.pkTable=pkTable;
		this.clobTableName=clobTable;
		this.allTypeTableName=allTypeTable;
	}
 
	@Override
	public void createTables() {

		dropTables();
		
		createNewsTable();
		
		createClobTable();
		
		createPKTable();
		
		createAllTypeTable();
		
		System.out.println();
		
	}

	private void createPKTable() {
		
		String[] lnsPK = {
				"CREATE TABLE "+this.getPKTableName(),
				"(",
				" bill_id integer NOT NULL,",
				" owner_id integer NOT NULL,",
				" type varchar(255) NOT NULL,",
				" PRIMARY KEY (bill_id,owner_id,type)",
				")"
		};

		this.execute(SQL.joinSQLs(lnsPK));
		
		//this.execute("ALTER TABLE  "+getPKTableName()+" ADD CONSTRAINT "+getPKTableName()+"_pkey PRIMARY KEY (id)");
		
		this.execute("COMMENT ON TABLE "+this.getPKTableName()+" IS '主键测试表；联合主键表'");
		
		this.execute("COMMENT ON COLUMN "+getPKTableName()+".bill_id IS '单据号'");
		this.execute("COMMENT ON COLUMN "+getPKTableName()+".owner_id IS '所有者'");
		this.execute("COMMENT ON COLUMN "+getPKTableName()+".type IS '类型'");

		Logger.info("创建表 "+getPKTableName());
	}
	
	private void createAllTypeTable() {
		
		
		String[] lines= {
				"CREATE TABLE "+getAllTypeTableName()+" (",
				"id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY (",
				"INCREMENT 1",
				"MINVALUE  1",
				"MAXVALUE 9223372036854775807",
				"START 1",
				"),",
				"bit_value_6 bit(6),",
				"bool_value bool,",
				"box_value box,",
				"bytea_value bytea,",
				"char_value char(16) COLLATE pg_catalog.default,",
				"cidr_value cidr,",
				"circle_value circle,",
				"date_value date,",
				"decimal_value numeric(10,2),",
				"float4_value float4,",
				"float8_value float8,",
				"inet_value inet,",
				"int2_value int2,",
				"int4_value int4,",
				"int8_value int8,",
				"interval_value interval(6),",
				"json_value json,",
				"jsonb_value jsonb,",
				"line_value line,",
				"lseg_value lseg,",
				"macaddr_value macaddr,",
				"money_value money,",
				"path_value path,",
				"point_value point,",
				"polygon_value polygon,",
				//"serial2_value int2 NOT NULL DEFAULT nextval('"+getAllTypeTableName()+"_serial2_value_seq'::regclass),",
				//"serial4_value int4 NOT NULL DEFAULT nextval('"+getAllTypeTableName()+"_serial4_value_seq'::regclass),",
				//"serial8_value int8 NOT NULL DEFAULT nextval('"+getAllTypeTableName()+"_serial8_value_seq'::regclass),",
				"text_value text COLLATE pg_catalog.default,",
				"time_value time(6),",
				"timestamp_value timestamp(6),",
				"timestamptz_value timestamptz(6),",
				"timetz_value timetz(6),",
				"tsquery_value tsquery,",
				"tsvector_value tsvector,",
				"txid_snapshot_value txid_snapshot,",
				"uuid_value uuid,",
				"varbit_value varbit,",
				"varchar_value varchar COLLATE pg_catalog.default,",
				"xml_value xml",
				")"
		};

		this.execute(SQL.joinSQLs(lines));
		
		//this.execute("ALTER TABLE "+getAllTypeTableName()+" ADD CONSTRAINT "+getAllTypeTableName()+"_pkey PRIMARY KEY (id)");
		this.execute("ALTER TABLE "+getAllTypeTableName()+" ADD PRIMARY KEY (id)");
		
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".id IS 'ID'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".bit_value_6 IS '固定长度的bit字符串'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".bool_value IS 'boolean，逻辑布尔值（true / false）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".box_value IS '平面上的矩形框'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".bytea_value IS '二进制数据（“字节数组”）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".char_value IS 'character，固定长度的字符串'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".cidr_value IS 'IPv4或IPv6网络地址'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".circle_value IS '平面上的圆圈'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".date_value IS '日历日期（年，月，日）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".decimal_value IS 'numeric，可选精度的精确数字'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".float4_value IS 'double precision 双精度浮点数（4字节）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".float8_value IS 'double precision 双精度浮点数（8字节）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".inet_value IS 'IPv4或IPv6主机地址'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".int2_value IS '有符号的2字节整数'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".int4_value IS '有符号的4字节整数'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".int8_value IS '有符号的8字节整数'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".interval_value IS '时间跨度'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".json_value IS '文本JSON数据'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".jsonb_value IS '二进制JSON数据'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".line_value IS '平面上的线'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".lseg_value IS '平面上的线段'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".macaddr_value IS 'MAC（媒体访问控制）地址'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".money_value IS '货币金额'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".path_value IS '平面上的几何路径'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".point_value IS '平面上的几何点'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".polygon_value IS '平面上的闭合的几何路径'");
		//this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".serial2_value IS '自动递增的2字节的整数'");
		//this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".serial4_value IS '自动递增的4字节的整数'");
		//this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".serial8_value IS '自动递增的8字节的整数'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".text_value IS '可变长度字符串'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".time_value IS '一天中的时间（没有时区）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".timestamp_value IS '日期和时间（没有时区）'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".timestamptz_value IS '日期和时间，含时区'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".timetz_value IS '一天中的时间，含时区'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".tsquery_value IS '文本搜索查询'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".tsvector_value IS '文本搜索文档'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".txid_snapshot_value IS '用户级事务ID快照'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".uuid_value IS '普遍唯一的标识符'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".varbit_value IS '可变长度的bit字符串'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".varchar_value IS 'character varying (n)，可变长度字符串'");
		this.execute("COMMENT ON COLUMN "+getAllTypeTableName()+".xml_value IS 'XML数据'");
		
		//
		this.execute("COMMENT ON TABLE "+getAllTypeTableName()+" IS '全类型表'");
		
		
		
		
		Logger.info("创建表 "+getAllTypeTableName());
	}

	
	private void createNewsTable() {
		
		String[] lns= {
				
				"CREATE TABLE "+getNormalTableName()+"(",
				"id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY (",
				"INCREMENT 1",
				"MINVALUE  1",
				"MAXVALUE 9223372036854775807",
				"START 1),",
				"code varchar(64) COLLATE pg_catalog.default,",
				"title varchar(255) COLLATE pg_catalog.default,",
				"publish_day timestamp(0),",
				"enter_time timestamp(0),",
				"newsId varchar(64),",
				"alert_time time(3),",
				"price numeric(10,2),",
				"create_by varchar(64) COLLATE pg_catalog.default,",
				"create_time timestamp(0),",
				"deleted int2,",
				"valid int2,",
				"is_used int2,",
				"is_active int2,",
				"running int2,",
				"read_times int4",
				")"
				
		};
		
		this.execute(SQL.joinSQLs(lns));
		
		//this.execute("ALTER TABLE  "+getNormalTableName()+" ADD CONSTRAINT "+getNormalTableName()+"_pkey PRIMARY KEY (id)");
		
		this.execute("ALTER TABLE "+getNormalTableName()+" ADD PRIMARY KEY (id)");
		
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".id IS 'ID'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".code IS '代码,业务代码'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".title IS '标题'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".publish_day IS '发布时间，新闻的实际发布时间'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".enter_time IS '输入时间，开始录入的时间'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".newsId IS '新闻内容ID'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".alert_time IS '提醒时间'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".price IS '单价，阅读计费'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".create_by IS '创建人'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".create_time IS '创建时间'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".deleted IS '是否已删'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".valid IS '是否有效'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".is_used IS '是否有效'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".is_active IS '是否激活'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".running IS '是否运行中'");
		this.execute("COMMENT ON COLUMN "+getNormalTableName()+".read_times IS '阅读次数'");
		this.execute("COMMENT ON TABLE "+getNormalTableName()+" IS '新闻 新闻信息'");
		
		Logger.info("创建表 "+getNormalTableName());
	}
	
	private void createClobTable() {
 
		String[] lns= {
				  "CREATE TABLE "+getClobTableName()+" (",
				  "id varchar(64) NOT NULL,",
				  "content text,",
				  "PRIMARY KEY (id)",
				  ")"
		};
		
		this.execute(SQL.joinSQLs(lns));
		
		//this.execute("ALTER TABLE  "+getClobTableName()+" ADD CONSTRAINT "+getClobTableName()+"_pkey PRIMARY KEY (id)");
		
	 
		this.execute("COMMENT ON COLUMN "+getClobTableName()+".id IS 'ID'");
		this.execute("COMMENT ON COLUMN "+getClobTableName()+".content IS '内容'");
		this.execute("COMMENT ON TABLE "+getClobTableName()+"  IS '内容表，大内容部分存储'");

		Logger.info("创建表 "+getClobTableName());
		
	}
	
	

	@Override
	public void dropTables() {
		Logger.info("删除表 "+getNormalTableName());
		this.execute("DROP TABLE IF EXISTS "+getNormalTableName());
		Logger.info("删除表 "+getPKTableName());
		this.execute("DROP TABLE IF EXISTS "+getPKTableName());
		Logger.info("删除表 "+getClobTableName());
		this.execute("DROP TABLE IF EXISTS "+getClobTableName());
		Logger.info("删除表 "+getAllTypeTableName());
		this.execute("DROP TABLE IF EXISTS "+getAllTypeTableName());
	}
}
